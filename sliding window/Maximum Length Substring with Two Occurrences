class Solution:
    def maximumSubstring(self, s: str) -> str:
        # Dictionary to store the first and last occurrence of each character
        first_occurrence = {}
        last_occurrence = {}
        
        # Fill in the first and last occurrence dictionaries
        for i, char in enumerate(s):
            if char not in first_occurrence:
                first_occurrence[char] = i
            last_occurrence[char] = i
        
        # Find the longest substring with exactly two occurrences of each character
        max_len = 0
        result = ""
        
        for i in range(len(s)):
            for j in range(i + 1, len(s) + 1):
                substring = s[i:j]
                is_valid = True
                for char in set(substring):
                    # Check if each character appears exactly twice
                    if substring.count(char) != 2:
                        is_valid = False
                        break
                if is_valid and len(substring) > max_len:
                    max_len = len(substring)
                    result = substring
        
        return result

# Example usage
if __name__ == "__main__":
    s = "abacabadabacaba"
    solution = Solution()
    result = solution.maximumSubstring(s)
    print("Maximum length substring with two occurrences:", result)
